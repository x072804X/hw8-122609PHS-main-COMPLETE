
const MAD_LIB = getLongMadLib(); // You can try using both getShortMadLib() and getLongMadLib()

/**
 * This function is done for you.
 * This function is called when the page is initially loaded.
 * It will generate inputs based on the contents of the MAD_LIB.fillers list.
 * Each input has an associated label and error text that begins as empty.
 */
function setup() {
    let parentNode = document.getElementById("madlib-questions");

    for(let i = 0; i < MAD_LIB.fillers.length; i++) {
        let currLib = MAD_LIB.fillers[i];

        let newDivNode = document.createElement("div");
        newDivNode.className = "mb-2"

        let newInputNode = document.createElement("input");
        newInputNode.id = currLib.id + "-input";
        newInputNode.style.maxWidth = "25em";
        newInputNode.className = "form-control"
        newInputNode.placeholder = currLib.exampleText;
        
        let newLabelNode = document.createElement("label");
        newLabelNode.for = currLib.id + "-input";
        newLabelNode.innerText = currLib.friendlyText;

        let newErrorTextNode = document.createElement("p");
        newErrorTextNode.id = currLib.id + "-error-text";
        newErrorTextNode.style.color = "red";
        newErrorTextNode.innerText = "";

        newDivNode.appendChild(newLabelNode);
        newDivNode.append(newInputNode);
        newDivNode.append(newErrorTextNode);

        parentNode.appendChild(newDivNode);
    }
}

/**
 * This function is done for you.
 * This function is called anytime the user presses the "Generate!" button.
 * It first checks if the given inputs are valid. If they are valid,
 * the madlib is generated by calling the generateLib function.
 */
function generate() {
    if (validate()) {
        generateLib();
        alert("Success! Please see below for your MadLib :)");
    } else {
        alert("Uh oh, please check your form submission.")
    }
}

/**
 * This function is called by generate any time the user requests
 * generation and validation passes. Generate the `madlib-result` div
 * such that any existing HTML is replaced with the newest madlib contents.
 */
function generateLib() {
    const resultDiv = document.getElementById("madlib-result");
    resultDiv.innerHTML = "";

    let pBuilder = document.createElement("p"); 
    pBuilder.innerText = "I should start building the madlib!";

    resultDiv.appendChild(pBuilder);
}

/**
 * This function should check if any of the inputs have validation errors.
 * For each input, if it has validation errors, set the appropriate error text.
 * Otherwise, reset any error text that may exist. Use error text appropriate to
 * each form control, for exdample if validation fails on a quote, the error text
 * should say 'Please type 1 or more characters between quotes.' If the validation fails 
 * on a word, the error text should say 'Please type 1 or more letters, without spaces.'
 * 
 * Be sure to return true or false! Return true if all inputs are valid,
 * otherwise return false if ANY input is invalid.
 * 
 * @returns {boolean} true if form is valid, false otherwise.
 */
function validate() {
    let isValid = true;
    const wordRegex = /^[a-zA-Z]+$/;
    const properNounRegex = /^[A-Z][a-zA-Z]*$/;
    const adjectiveRegex = /^[a-zA-Z]*[yY]$/;
    const quoteRegex = /^(['"])(.*)\1$/;
    //Needed help with beginning the expressions so I used AI on the four expressions above
    // TODO: If any inputs are invalid, set their error text.
    //       After checking ALL inputs, return true/false if
    //       the entire form was valid or not.
    console.log("flag")
    console.log(wordRegex.test(""))
    
    for(let i = 0; i < MAD_LIB.fillers.length; i++) {
        let checker = true
        let currLib = MAD_LIB.fillers[i];
        let currInputId = currLib.id + "-input";
        let currErrorTextId = currLib.id + "-error-text";
        console.log(currLib) 
        console.log(currInputId) 
       console.log(currErrorTextId)
       let errorElement = document.getElementById(currErrorTextId);
       console.log("flag")
        console.log(document.getElementById(currInputId).value)
        if (currLib.type == "word") { 
          if (!wordRegex.test(document.getElementById(currInputId).value)) {
            document.getElementById(currErrorTextId).innerText = "Please type 1 or more letters, without spaces or special characters."
            checker = false 
           }
        } 
        
        else if (currLib.type == "properNoun") {
            if (!properNounRegex.test(document.getElementById(currInputId).value)) {
                document.getElementById(currErrorTextId).innerText = "Please type 1 or more letters, without special characters, starting with a capital letter."
                checker = false 
               }

        }
        else if (currLib.type == "adjective") {
            if (!adjectiveRegex.test(document.getElementById(currInputId).value)) {
                document.getElementById(currErrorTextId).innerText = "Please type 1 or more letters, without special characters, ending with a y."
                checker = false 
               }

        }
        else if (currLib.type == "quote") {
            if (!quoteRegex.test(document.getElementById(currInputId).value)) {
                document.getElementById(currErrorTextId).innerText = "Please type 1 or more characters between single or double quotes."
                checker = false 
               }

        }
    console.log(checker)
        if (!checker) {
      //      document.getElementById(currErrorTextId).innerText = ""
            isValid = false
        //    errorElement.innerText = ""
        } else {
            document.getElementById(currErrorTextId).innerText = ""
        }


   //     document.getElementById(currErrorTextId).innerText = "Sorry this was incorrect"
    }

    return isValid;
}
function generateLib(){
    let currentP = document.createElement("p")
    const result = document.getElementById("madlib-result")
    segment = MAD_LIB.text["segmentType"]
 for (segment of MAD_LIB.text) {
     }   if (segment.segmentType === "fillable") {
          const textnode = document.createTextNode(segment.text)
          currentP.appendChild(textnode)
     } else if (segment.segmentType === "static") {
        const INPUT = document.getElementById(segment.id + "-input")
        if (INPUT) {
            const textnode = document.createTextNode(INPUT.value)
            currentP = document.createElement("p")
        }
    } else if (segment.segmentType === "newline") {
        result.appendChild(currentP)
        currentP = document.createElement("p")


    }
//I used google gemini for reference on the "static" segment type loop. The AI reference helped me complete the loop.


}


// Don't remove this! It runs the setup function on page load.
window.onload = setup;
